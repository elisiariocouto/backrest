{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,A,W,iB,C,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,kB,C,I,I,E,I,K,E,W,C,E,a,C,C,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SCwBO,IAAM,EAAkB,CAAC,CAAA,KAAE,CAAI,CAAkB,IACtD,GAAM,CAAC,EAAQ,EAAE,CAAG,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,IACd,EAAY,AAAA,CAAA,EAAA,EAAA,YAAW,AAAX,IACZ,EAAW,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,IACX,CAAC,EAAS,EAAW,CAAG,AAAA,EAAA,GAAM,QAAQ,CAAC,IACvC,CAAC,EAAS,EAAW,CAAG,AAAA,EAAA,GAAM,QAAQ,CAAC,CAAA,GAMvC,EAAY,UAChB,GAAI,CAAC,EAAS,OACd,EAAW,CAAA,GAEX,IAAM,EAAQ,EAAQ,IAAI,GAC1B,EAAW,IAEX,GAAI,CACW,MAAM,AAAA,EAAA,eAAc,CAAE,UAAU,CAC3C,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,EAAA,uBAAsB,CAAG,CAC9B,OAAQ,EAAK,EAAE,CACf,QAAS,CACX,GAEJ,CAAE,MAAO,EAAQ,CACf,EAAS,KAAK,CAAC,mBAAqB,EAAE,OAAO,CAC/C,QAAU,CACR,EAAW,CAAA,EACb,CACF,EAEA,MACE,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,EAAA,OAAI,CADP,CAEI,KAAM,CAAA,EACN,SA5BiB,KACnB,EAAU,KACZ,EA2BI,MAAO,uBAAyB,EAAK,EAAE,CACvC,MAAM,OACN,OAAQ,EAAE,C,S,CAEV,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,AAAA,EAAA,OAAI,CAAE,OAAO,CAAd,CAAe,MAAO,CAAE,MAAO,MAAO,E,S,CACpC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,OAAI,CAAL,CACE,YAAY,sDACZ,MAAO,EACP,SAAU,AAAC,GAAM,EAAW,EAAE,MAAM,CAAC,KAAK,EAC1C,QAAS,AAAC,IACJ,AAAU,UAAV,EAAE,GAAG,EACP,GAEJ,C,GAEF,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,UAAS,CAAV,CAAY,KAAK,UAAU,aAAc,EAAW,SAAA,S,G,A,GAIrD,GAAW,EACV,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,KADF,CACK,MAAO,CAAE,MAAO,MAAO,EAAG,SAAA,kIAI5B,GAAA,KACJ,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,iBAAgB,CAAjB,CACE,IAAK,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,EAAA,0BAAyB,CAAG,CACtC,SAAU,CACR,WAAY,GAAQ,SACpB,SAAU,EAAK,IAAI,CACnB,OAAQ,UACV,CACF,GACA,OAAQ,AAAC,GAAO,AAAe,wBAAf,EAAG,EAAE,CAAC,IAAI,A,G,A,EAIlC,C","sources":["<anon>","src/views/RunCommandModal.tsx"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire233b\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fFsUW\", function(module, exports) {\n\n$parcel$export(module.exports, \"RunCommandModal\", () => $c1010d2f68958220$export$abe8de9c34bd517);\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $eTcXV = parcelRequire(\"eTcXV\");\nvar $jCenh = parcelRequire(\"jCenh\");\nvar $cjjxG = parcelRequire(\"cjjxG\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $dkYnv = parcelRequire(\"dkYnv\");\n\nvar $1Yxub = parcelRequire(\"1Yxub\");\n\nvar $2qtef = parcelRequire(\"2qtef\");\n\nvar $3JMMO = parcelRequire(\"3JMMO\");\n\nvar $cT7kT = parcelRequire(\"cT7kT\");\n\nvar $fz9dF = parcelRequire(\"fz9dF\");\n\nvar $lPKqJ = parcelRequire(\"lPKqJ\");\n\nvar $1VQWV = parcelRequire(\"1VQWV\");\nconst $c1010d2f68958220$export$abe8de9c34bd517 = ({ repo: repo })=>{\n    const [config, _] = (0, $1VQWV.useConfig)();\n    const showModal = (0, $dkYnv.useShowModal)();\n    const alertApi = (0, $3JMMO.useAlertApi)();\n    const [command, setCommand] = (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).useState(\"\");\n    const [running, setRunning] = (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).useState(false);\n    const handleCancel = ()=>{\n        showModal(null);\n    };\n    const doExecute = async ()=>{\n        if (!command) return;\n        setRunning(true);\n        const toRun = command.trim();\n        setCommand(\"\");\n        try {\n            const opID = await (0, $1Yxub.backrestService).runCommand((0, $lPKqJ.create)((0, $cT7kT.RunCommandRequestSchema), {\n                repoId: repo.id,\n                command: toRun\n            }));\n        } catch (e) {\n            alertApi.error(\"Command failed: \" + e.message);\n        } finally{\n            setRunning(false);\n        }\n    };\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $jCenh.default), {\n        open: true,\n        onCancel: handleCancel,\n        title: \"Run Command in repo \" + repo.id,\n        width: \"80vw\",\n        footer: [],\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $cjjxG.default).Compact, {\n                style: {\n                    width: \"100%\"\n                },\n                children: [\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $eTcXV.default), {\n                        placeholder: \"Run a restic command e.g. 'help' to print help text\",\n                        value: command,\n                        onChange: (e)=>setCommand(e.target.value),\n                        onKeyUp: (e)=>{\n                            if (e.key === \"Enter\") doExecute();\n                        }\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $2qtef.SpinButton), {\n                        type: \"primary\",\n                        onClickAsync: doExecute,\n                        children: \"Execute\"\n                    })\n                ]\n            }),\n            running && command ? /*#__PURE__*/ (0, $ayMG0.jsx)(\"em\", {\n                style: {\n                    color: \"gray\"\n                },\n                children: \"Warning: another command is already running. Wait for it to finish before running another operation that requires the repo lock.\"\n            }) : null,\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $fz9dF.OperationListView), {\n                req: (0, $lPKqJ.create)((0, $cT7kT.GetOperationsRequestSchema), {\n                    selector: {\n                        instanceId: config?.instance,\n                        repoGuid: repo.guid,\n                        planId: \"_system_\"\n                    }\n                }),\n                filter: (op)=>op.op.case === \"operationRunCommand\"\n            })\n        ]\n    });\n};\n\n});\n\n\n//# sourceMappingURL=RunCommandModal.109faed3.js.map\n","import { Button, Input, Modal, Space } from \"antd\";\nimport React from \"react\";\nimport { useShowModal } from \"../components/ModalManager\";\nimport { backrestService } from \"../api\";\nimport { SpinButton } from \"../components/SpinButton\";\nimport { ConnectError } from \"@connectrpc/connect\";\nimport { useAlertApi } from \"../components/Alerts\";\nimport {\n  GetOperationsRequest,\n  GetOperationsRequestSchema,\n  RunCommandRequest,\n  RunCommandRequestSchema,\n} from \"../../gen/ts/v1/service_pb\";\nimport { Repo } from \"../../gen/ts/v1/config_pb\";\nimport { OperationListView } from \"../components/OperationListView\";\nimport { create } from \"@bufbuild/protobuf\";\nimport { useConfig } from \"../components/ConfigProvider\";\n\ninterface Invocation {\n  command: string;\n  output: string;\n  error: string;\n}\n\nexport const RunCommandModal = ({ repo }: { repo: Repo }) => {\n  const [config, _] = useConfig();\n  const showModal = useShowModal();\n  const alertApi = useAlertApi()!;\n  const [command, setCommand] = React.useState(\"\");\n  const [running, setRunning] = React.useState(false);\n\n  const handleCancel = () => {\n    showModal(null);\n  };\n\n  const doExecute = async () => {\n    if (!command) return;\n    setRunning(true);\n\n    const toRun = command.trim();\n    setCommand(\"\");\n\n    try {\n      const opID = await backrestService.runCommand(\n        create(RunCommandRequestSchema, {\n          repoId: repo.id!,\n          command: toRun,\n        })\n      );\n    } catch (e: any) {\n      alertApi.error(\"Command failed: \" + e.message);\n    } finally {\n      setRunning(false);\n    }\n  };\n\n  return (\n    <Modal\n      open={true}\n      onCancel={handleCancel}\n      title={\"Run Command in repo \" + repo.id}\n      width=\"80vw\"\n      footer={[]}\n    >\n      <Space.Compact style={{ width: \"100%\" }}>\n        <Input\n          placeholder=\"Run a restic command e.g. 'help' to print help text\"\n          value={command}\n          onChange={(e) => setCommand(e.target.value)}\n          onKeyUp={(e) => {\n            if (e.key === \"Enter\") {\n              doExecute();\n            }\n          }}\n        />\n        <SpinButton type=\"primary\" onClickAsync={doExecute}>\n          Execute\n        </SpinButton>\n      </Space.Compact>\n      {running && command ? (\n        <em style={{ color: \"gray\" }}>\n          Warning: another command is already running. Wait for it to finish\n          before running another operation that requires the repo lock.\n        </em>\n      ) : null}\n      <OperationListView\n        req={create(GetOperationsRequestSchema, {\n          selector: {\n            instanceId: config?.instance,\n            repoGuid: repo.guid,\n            planId: \"_system_\", // run commands are not associated with a plan\n          },\n        })}\n        filter={(op) => op.op.case === \"operationRunCommand\"}\n      />\n    </Modal>\n  );\n};\n"],"names":["$parcel$interopDefault","a","__esModule","default","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","Object","defineProperty","get","$c1010d2f68958220$export$abe8de9c34bd517","set","s","enumerable","configurable","$ayMG0","$eTcXV","$jCenh","$cjjxG","$acw62","$dkYnv","$1Yxub","$2qtef","$3JMMO","$cT7kT","$fz9dF","$lPKqJ","$1VQWV","repo","config","_","useConfig","showModal","useShowModal","alertApi","useAlertApi","command","setCommand","useState","running","setRunning","doExecute","toRun","trim","backrestService","runCommand","create","RunCommandRequestSchema","repoId","id","e","error","message","jsxs","open","onCancel","title","width","footer","children","Compact","style","jsx","placeholder","value","onChange","target","onKeyUp","key","SpinButton","type","onClickAsync","color","OperationListView","req","GetOperationsRequestSchema","selector","instanceId","instance","repoGuid","guid","planId","filter","op","case"],"version":3,"file":"RunCommandModal.109faed3.js.map"}
{"mappings":"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","sources":["<anon>","src/views/SettingsModal.tsx","node_modules/@bufbuild/protobuf/dist/esm/clone.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire233b\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"9VL5o\", function(module, exports) {\n\n$parcel$export(module.exports, \"SettingsModal\", () => $0f720e8bbc6e79b5$export$dfaef62a0892bd28);\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $4Uh7a = parcelRequire(\"4Uh7a\");\nvar $iJ95P = parcelRequire(\"iJ95P\");\nvar $1gKZf = parcelRequire(\"1gKZf\");\nvar $bAJM4 = parcelRequire(\"bAJM4\");\nvar $4To0s = parcelRequire(\"4To0s\");\nvar $eTcXV = parcelRequire(\"eTcXV\");\nvar $jCenh = parcelRequire(\"jCenh\");\nvar $3VOgd = parcelRequire(\"3VOgd\");\nvar $2lwvh = parcelRequire(\"2lwvh\");\nvar $93lJr = parcelRequire(\"93lJr\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $dkYnv = parcelRequire(\"dkYnv\");\n\nvar $54UqH = parcelRequire(\"54UqH\");\nvar $8p4qI = parcelRequire(\"8p4qI\");\n\nvar $3JMMO = parcelRequire(\"3JMMO\");\n\nvar $lK1ug = parcelRequire(\"lK1ug\");\n\nvar $1VQWV = parcelRequire(\"1VQWV\");\n\nvar $1Yxub = parcelRequire(\"1Yxub\");\n\nvar $g0Gjq = parcelRequire(\"g0Gjq\");\nvar $4l8Tp = parcelRequire(\"4l8Tp\");\nvar $7nu3T = parcelRequire(\"7nu3T\");\n\nvar $6Os56 = parcelRequire(\"6Os56\");\n\nvar $2riGH = parcelRequire(\"2riGH\");\n\nvar $h3NYq = parcelRequire(\"h3NYq\");\nconst $0f720e8bbc6e79b5$export$dfaef62a0892bd28 = ()=>{\n    let [config, setConfig] = (0, $1VQWV.useConfig)();\n    const showModal = (0, $dkYnv.useShowModal)();\n    const alertsApi = (0, $3JMMO.useAlertApi)();\n    const [form] = (0, $4To0s.default).useForm();\n    const [peerStates, setPeerStates] = (0, $acw62.useState)([]);\n    const [reloadOnCancel, setReloadOnCancel] = (0, $acw62.useState)(false);\n    const [formEdited, setFormEdited] = (0, $acw62.useState)(false);\n    if (!config) return null;\n    (0, $acw62.useEffect)(()=>{\n        const cb = (syncStates)=>{\n            setPeerStates(syncStates);\n        };\n        (0, $2riGH.subscribeToPeerStates)(cb);\n        return ()=>{\n            (0, $2riGH.unsubscribeFromPeerStates)(cb);\n        };\n    }, []);\n    const handleOk = async ()=>{\n        try {\n            // Validate form\n            let formData = await (0, $lK1ug.validateForm)(form);\n            if (formData.auth?.users) {\n                for (const user of formData.auth?.users)if (user.needsBcrypt) {\n                    const hash = await (0, $1Yxub.authenticationService).hashPassword({\n                        value: user.passwordBcrypt\n                    });\n                    user.passwordBcrypt = hash.value;\n                    delete user.needsBcrypt;\n                }\n            }\n            // Update configuration\n            let newConfig = (0, $g0Gjq.clone)((0, $6Os56.ConfigSchema), config);\n            newConfig.auth = (0, $4l8Tp.fromJson)((0, $6Os56.AuthSchema), formData.auth, {\n                ignoreUnknownFields: false\n            });\n            newConfig.multihost = (0, $4l8Tp.fromJson)((0, $6Os56.MultihostSchema), formData.multihost, {\n                ignoreUnknownFields: false\n            });\n            newConfig.instance = formData.instance;\n            if (!newConfig.auth?.users && !newConfig.auth?.disabled) throw new Error(\"At least one user must be configured or authentication must be disabled\");\n            setConfig(await (0, $1Yxub.backrestService).setConfig(newConfig));\n            setReloadOnCancel(true);\n            alertsApi.success(\"Settings updated\", 5);\n            setFormEdited(false);\n        } catch (e) {\n            alertsApi.error((0, $3JMMO.formatErrorAlert)(e, \"Operation error: \"), 15);\n        }\n    };\n    const handleCancel = ()=>{\n        showModal(null);\n        if (reloadOnCancel) window.location.reload();\n    };\n    const users = config.auth?.users || [];\n    return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $ayMG0.Fragment), {\n        children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $jCenh.default), {\n            open: true,\n            onCancel: handleCancel,\n            title: \"Settings\",\n            width: \"60vw\",\n            footer: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4Uh7a.default), {\n                    onClick: handleCancel,\n                    children: formEdited ? \"Cancel\" : \"Close\"\n                }, \"back\"),\n                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4Uh7a.default), {\n                    type: \"primary\",\n                    onClick: handleOk,\n                    children: \"Save\"\n                }, \"submit\")\n            ],\n            children: /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $4To0s.default), {\n                autoComplete: \"off\",\n                form: form,\n                labelCol: {\n                    span: 4\n                },\n                wrapperCol: {\n                    span: 20\n                },\n                onValuesChange: ()=>setFormEdited(true),\n                children: [\n                    users.length > 0 || config.auth?.disabled ? null : /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $ayMG0.Fragment), {\n                        children: [\n                            /*#__PURE__*/ (0, $ayMG0.jsx)(\"strong\", {\n                                children: \"Initial backrest setup! \"\n                            }),\n                            /*#__PURE__*/ (0, $ayMG0.jsx)(\"p\", {\n                                children: \"Backrest has detected that you do not have any users configured, please add at least one user to secure the web interface.\"\n                            }),\n                            /*#__PURE__*/ (0, $ayMG0.jsx)(\"p\", {\n                                children: \"You can add more users later or, if you forget your password, reset users by editing the configuration file (typically in $HOME/.backrest/config.json)\"\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                        hasFeedback: true,\n                        name: \"instance\",\n                        label: \"Instance ID\",\n                        required: true,\n                        initialValue: config.instance || \"\",\n                        tooltip: \"The instance name will be used to identify this backrest install. Pick a value carefully as it cannot be changed later.\",\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Instance ID is required\"\n                            },\n                            {\n                                pattern: (0, $lK1ug.namePattern),\n                                message: \"Instance ID must be alphanumeric with '_-.' allowed as separators\"\n                            }\n                        ],\n                        children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $eTcXV.default), {\n                            placeholder: \"Unique instance ID for this instance (e.g. my-backrest-server)\",\n                            disabled: !!config.instance\n                        })\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $bAJM4.default), {\n                        items: [\n                            {\n                                key: \"1\",\n                                label: \"Authentication\",\n                                forceRender: true,\n                                children: /*#__PURE__*/ (0, $ayMG0.jsx)($0f720e8bbc6e79b5$var$AuthenticationForm, {\n                                    form: form,\n                                    config: config\n                                })\n                            },\n                            {\n                                key: \"2\",\n                                label: \"Multihost Identity and Sharing\",\n                                forceRender: true,\n                                children: /*#__PURE__*/ (0, $ayMG0.jsx)($0f720e8bbc6e79b5$var$MultihostIdentityForm, {\n                                    form: form,\n                                    config: config,\n                                    peerStates: peerStates\n                                }),\n                                /* hidden until multihost is stable */ style: {\n                                    display: \"none\"\n                                }\n                            },\n                            {\n                                key: \"last\",\n                                label: \"Preview\",\n                                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                                    shouldUpdate: true,\n                                    wrapperCol: {\n                                        span: 24\n                                    },\n                                    children: ()=>/*#__PURE__*/ (0, $ayMG0.jsx)((0, $93lJr.default), {\n                                            children: /*#__PURE__*/ (0, $ayMG0.jsx)(\"pre\", {\n                                                children: JSON.stringify(form.getFieldsValue(), null, 2)\n                                            })\n                                        })\n                                })\n                            }\n                        ]\n                    })\n                ]\n            })\n        })\n    });\n};\nconst $0f720e8bbc6e79b5$var$AuthenticationForm = ({ form: form, config: config })=>{\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $ayMG0.Fragment), {\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                label: \"Disable Authentication\",\n                name: [\n                    \"auth\",\n                    \"disabled\"\n                ],\n                valuePropName: \"checked\",\n                initialValue: config.auth?.disabled || false,\n                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $iJ95P.default), {})\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                label: \"Users\",\n                required: true,\n                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).List, {\n                    name: [\n                        \"auth\",\n                        \"users\"\n                    ],\n                    initialValue: config.auth?.users?.map((u)=>(0, $7nu3T.toJson)((0, $6Os56.UserSchema), u, {\n                            alwaysEmitImplicit: true\n                        })) || [],\n                    children: (fields, { add: add, remove: remove })=>/*#__PURE__*/ (0, $ayMG0.jsxs)((0, $ayMG0.Fragment), {\n                            children: [\n                                fields.map((field, index)=>{\n                                    return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $3VOgd.default), {\n                                        gutter: 16,\n                                        children: [\n                                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                                                span: 11,\n                                                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                                                    name: [\n                                                        field.name,\n                                                        \"name\"\n                                                    ],\n                                                    rules: [\n                                                        {\n                                                            required: true,\n                                                            message: \"Name is required\"\n                                                        },\n                                                        {\n                                                            pattern: (0, $lK1ug.namePattern),\n                                                            message: \"Name must be alphanumeric with dashes or underscores as separators\"\n                                                        }\n                                                    ],\n                                                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $eTcXV.default), {\n                                                        placeholder: \"Username\"\n                                                    })\n                                                })\n                                            }),\n                                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                                                span: 11,\n                                                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                                                    name: [\n                                                        field.name,\n                                                        \"passwordBcrypt\"\n                                                    ],\n                                                    rules: [\n                                                        {\n                                                            required: true,\n                                                            message: \"Password is required\"\n                                                        }\n                                                    ],\n                                                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $eTcXV.default).Password, {\n                                                        placeholder: \"Password\",\n                                                        onFocus: ()=>{\n                                                            form.setFieldValue([\n                                                                \"auth\",\n                                                                \"users\",\n                                                                index,\n                                                                \"needsBcrypt\"\n                                                            ], true);\n                                                            form.setFieldValue([\n                                                                \"auth\",\n                                                                \"users\",\n                                                                index,\n                                                                \"passwordBcrypt\"\n                                                            ], \"\");\n                                                        }\n                                                    })\n                                                })\n                                            }),\n                                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                                                span: 2,\n                                                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $54UqH.default), {\n                                                    onClick: ()=>{\n                                                        remove(field.name);\n                                                    }\n                                                })\n                                            })\n                                        ]\n                                    }, field.key);\n                                }),\n                                /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                                    children: /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $4Uh7a.default), {\n                                        type: \"dashed\",\n                                        onClick: ()=>{\n                                            add();\n                                        },\n                                        block: true,\n                                        children: [\n                                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $8p4qI.default), {}),\n                                            \" Add user\"\n                                        ]\n                                    })\n                                })\n                            ]\n                        })\n                })\n            })\n        ]\n    });\n};\nconst $0f720e8bbc6e79b5$var$MultihostIdentityForm = ({ form: form, config: config, peerStates: peerStates })=>{\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $ayMG0.Fragment), {\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $93lJr.default).Paragraph, {\n                italic: true,\n                children: \"Multihost identity allows you to share repositories between multiple Backrest instances. This is useful for keeping track of the backup status of a collections of systems.\"\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $93lJr.default).Paragraph, {\n                italic: true,\n                children: \"This feature is experimental and may be subject to version incompatible changes in the future which will require all instances to be updated at the same time.\"\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                label: \"Multihost Identity\",\n                name: [\n                    \"multihost\",\n                    \"identity\",\n                    \"keyId\"\n                ],\n                initialValue: config.multihost?.identity?.keyid || \"\",\n                rules: [\n                    {\n                        required: true,\n                        message: \"Multihost identity is required\"\n                    }\n                ],\n                tooltip: \"Multihost identity is used to identify this instance in a multihost setup. It is cryptographically derived from the public key of this instance.\",\n                wrapperCol: {\n                    span: 16\n                },\n                children: /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $3VOgd.default), {\n                    children: [\n                        /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                            flex: \"auto\",\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $eTcXV.default), {\n                                placeholder: \"Unique multihost identity\",\n                                disabled: true,\n                                value: config.multihost?.identity?.keyid\n                            })\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4Uh7a.default), {\n                                type: \"link\",\n                                onClick: ()=>-navigator.clipboard.writeText(config.multihost?.identity?.keyid || \"\"),\n                                children: \"copy\"\n                            })\n                        })\n                    ]\n                })\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                label: \"Authorized Clients\",\n                tooltip: \"Authorized clients are other Backrest instances that are allowed to access repositories on this instance.\",\n                children: /*#__PURE__*/ (0, $ayMG0.jsx)($0f720e8bbc6e79b5$var$PeerFormList, {\n                    form: form,\n                    listName: [\n                        \"multihost\",\n                        \"authorizedClients\"\n                    ],\n                    showInstanceUrl: false,\n                    itemTypeName: \"Authorized Client\",\n                    peerStates: peerStates,\n                    config: config,\n                    listType: \"authorizedClients\",\n                    initialValue: config.multihost?.authorizedClients?.map((peer)=>(0, $7nu3T.toJson)((0, $6Os56.Multihost_PeerSchema), peer, {\n                            alwaysEmitImplicit: true\n                        })) || []\n                })\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                label: \"Known Hosts\",\n                tooltip: \"Known hosts are other Backrest instances that this instance can connect to.\",\n                children: /*#__PURE__*/ (0, $ayMG0.jsx)($0f720e8bbc6e79b5$var$PeerFormList, {\n                    form: form,\n                    listName: [\n                        \"multihost\",\n                        \"knownHosts\"\n                    ],\n                    showInstanceUrl: true,\n                    itemTypeName: \"Known Host\",\n                    peerStates: peerStates,\n                    config: config,\n                    listType: \"knownHosts\",\n                    initialValue: config.multihost?.knownHosts?.map((peer)=>(0, $7nu3T.toJson)((0, $6Os56.Multihost_PeerSchema), peer, {\n                            alwaysEmitImplicit: true\n                        })) || []\n                })\n            })\n        ]\n    });\n};\nconst $0f720e8bbc6e79b5$var$PeerFormList = ({ form: form, listName: listName, showInstanceUrl: showInstanceUrl, itemTypeName: itemTypeName, peerStates: peerStates, initialValue: initialValue, config: config, listType: listType })=>{\n    return /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).List, {\n        name: listName,\n        initialValue: initialValue,\n        children: (fields, { add: add, remove: remove }, { errors: errors })=>/*#__PURE__*/ (0, $ayMG0.jsxs)((0, $ayMG0.Fragment), {\n                children: [\n                    fields.map((field, index)=>/*#__PURE__*/ (0, $ayMG0.jsx)($0f720e8bbc6e79b5$var$PeerFormListItem, {\n                            form: form,\n                            fieldName: field.name,\n                            remove: remove,\n                            showInstanceUrl: showInstanceUrl,\n                            peerStates: peerStates,\n                            isKnownHost: listType === \"knownHosts\",\n                            index: index,\n                            config: config,\n                            listType: listType\n                        }, field.key)),\n                    /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $4To0s.default).Item, {\n                        children: [\n                            /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $4Uh7a.default), {\n                                type: \"dashed\",\n                                onClick: ()=>add({}),\n                                block: true,\n                                icon: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $8p4qI.default), {}),\n                                children: [\n                                    \"Add \",\n                                    itemTypeName || \"Peer\"\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).ErrorList, {\n                                errors: errors\n                            })\n                        ]\n                    })\n                ]\n            })\n    });\n};\nconst $0f720e8bbc6e79b5$var$PeerFormListItem = ({ form: form, fieldName: fieldName, remove: remove, showInstanceUrl: showInstanceUrl, peerStates: peerStates, isKnownHost: isKnownHost = false, index: index, config: config, listType: listType })=>{\n    // Get the instance ID from the form to find the matching sync state, its a bit hacky but works reliably.\n    const keyId = isKnownHost ? form.getFieldValue([\n        \"multihost\",\n        \"knownHosts\",\n        index,\n        \"keyId\"\n    ]) : form.getFieldValue([\n        \"multihost\",\n        \"authorizedClients\",\n        index,\n        \"keyId\"\n    ]);\n    const peerState = peerStates.find((state)=>state.peerKeyid === keyId);\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        style: {\n            border: \"1px solid #d9d9d9\",\n            borderRadius: \"6px\",\n            padding: \"16px\",\n            marginBottom: \"16px\",\n            position: \"relative\"\n        },\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n                style: {\n                    position: \"absolute\",\n                    top: \"8px\",\n                    right: \"8px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: \"8px\"\n                },\n                children: [\n                    peerState && /*#__PURE__*/ (0, $ayMG0.jsx)((0, $h3NYq.PeerStateConnectionStatusIcon), {\n                        peerState: peerState\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $54UqH.default), {\n                        style: {\n                            color: \"#999\",\n                            cursor: \"pointer\"\n                        },\n                        onClick: ()=>remove(fieldName)\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $3VOgd.default), {\n                gutter: 16,\n                children: [\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                        span: 10,\n                        children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                            name: [\n                                fieldName,\n                                \"instanceId\"\n                            ],\n                            label: \"Instance ID\",\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Instance ID is required\"\n                                },\n                                {\n                                    pattern: (0, $lK1ug.namePattern),\n                                    message: \"Instance ID must be alphanumeric with '_-.' allowed as separators\"\n                                }\n                            ],\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $eTcXV.default), {\n                                placeholder: \"e.g. my-backup-server\"\n                            })\n                        })\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                        span: 10,\n                        children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                            name: [\n                                fieldName,\n                                \"keyId\"\n                            ],\n                            label: \"Key ID\",\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Key ID is required\"\n                                }\n                            ],\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $eTcXV.default), {\n                                placeholder: \"Public key identifier\"\n                            })\n                        })\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                        span: 4,\n                        children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                            name: [\n                                fieldName,\n                                \"keyIdVerified\"\n                            ],\n                            valuePropName: \"checked\",\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $iJ95P.default), {\n                                children: \"Verified\"\n                            })\n                        })\n                    })\n                ]\n            }),\n            showInstanceUrl && /*#__PURE__*/ (0, $ayMG0.jsx)((0, $3VOgd.default), {\n                gutter: 16,\n                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                    span: 24,\n                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                        name: [\n                            fieldName,\n                            \"instanceUrl\"\n                        ],\n                        label: \"Instance URL\",\n                        rules: [\n                            {\n                                required: showInstanceUrl,\n                                message: \"Instance URL is required for known hosts\"\n                            },\n                            {\n                                type: \"url\",\n                                message: \"Please enter a valid URL\"\n                            }\n                        ],\n                        children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $eTcXV.default), {\n                            placeholder: \"https://example.com:9898\"\n                        })\n                    })\n                })\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)($0f720e8bbc6e79b5$var$PeerPermissionsTile, {\n                form: form,\n                fieldName: fieldName,\n                listType: listType,\n                config: config\n            })\n        ]\n    });\n};\nconst $0f720e8bbc6e79b5$var$PeerPermissionsTile = ({ form: form, fieldName: fieldName, listType: listType, config: config })=>{\n    const repoOptions = (config.repos || []).map((repo)=>({\n            label: repo.id,\n            value: `repo:${repo.id}`\n        }));\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $93lJr.default).Text, {\n                strong: true,\n                style: {\n                    marginBottom: \"8px\",\n                    display: \"block\"\n                },\n                children: \"Permissions\"\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).List, {\n                name: [\n                    fieldName,\n                    \"permissions\"\n                ],\n                children: (permissionFields, { add: addPermission, remove: removePermission })=>/*#__PURE__*/ (0, $ayMG0.jsxs)((0, $ayMG0.Fragment), {\n                        children: [\n                            permissionFields.map((permissionField)=>/*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                                    style: {\n                                        border: \"1px solid #d9d9d9\",\n                                        borderRadius: \"4px\",\n                                        padding: \"12px\",\n                                        marginBottom: \"8px\",\n                                        backgroundColor: \"transparent\"\n                                    },\n                                    children: /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $3VOgd.default), {\n                                        gutter: 8,\n                                        align: \"middle\",\n                                        children: [\n                                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                                                span: 11,\n                                                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                                                    name: [\n                                                        permissionField.name,\n                                                        \"type\"\n                                                    ],\n                                                    label: \"Type\",\n                                                    rules: [\n                                                        {\n                                                            required: true,\n                                                            message: \"Permission type is required\"\n                                                        }\n                                                    ],\n                                                    children: /*#__PURE__*/ (0, $ayMG0.jsxs)((0, $2lwvh.default), {\n                                                        placeholder: \"Select permission type\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $2lwvh.default).Option, {\n                                                                value: (0, $6Os56.Multihost_Permission_Type).PERMISSION_READ_WRITE_CONFIG,\n                                                                children: \"Edit Repo Configuration\"\n                                                            }),\n                                                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $2lwvh.default).Option, {\n                                                                value: (0, $6Os56.Multihost_Permission_Type).PERMISSION_READ_OPERATIONS,\n                                                                children: \"Read Operations\"\n                                                            })\n                                                        ]\n                                                    })\n                                                })\n                                            }),\n                                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                                                span: 11,\n                                                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4To0s.default).Item, {\n                                                    name: [\n                                                        permissionField.name,\n                                                        \"scopes\"\n                                                    ],\n                                                    label: \"Scopes\",\n                                                    rules: [\n                                                        {\n                                                            required: true,\n                                                            message: \"At least one scope is required\"\n                                                        }\n                                                    ],\n                                                    children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $2lwvh.default), {\n                                                        mode: \"multiple\",\n                                                        placeholder: \"Select repositories or use * for all\",\n                                                        options: [\n                                                            {\n                                                                label: \"All Repositories (*)\",\n                                                                value: \"*\"\n                                                            },\n                                                            ...repoOptions\n                                                        ]\n                                                    })\n                                                })\n                                            }),\n                                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $1gKZf.default), {\n                                                span: 2,\n                                                children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $54UqH.default), {\n                                                    style: {\n                                                        color: \"#999\",\n                                                        cursor: \"pointer\",\n                                                        fontSize: \"16px\"\n                                                    },\n                                                    onClick: ()=>removePermission(permissionField.name)\n                                                })\n                                            })\n                                        ]\n                                    })\n                                }, permissionField.key)),\n                            /*#__PURE__*/ (0, $ayMG0.jsx)((0, $4Uh7a.default), {\n                                type: \"dashed\",\n                                onClick: ()=>addPermission({\n                                        type: (0, $6Os56.Multihost_Permission_Type).PERMISSION_READ_OPERATIONS,\n                                        scopes: [\n                                            \"*\"\n                                        ]\n                                    }),\n                                icon: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $8p4qI.default), {}),\n                                size: \"small\",\n                                style: {\n                                    width: \"100%\"\n                                },\n                                children: \"Add Permission\"\n                            })\n                        ]\n                    })\n            })\n        ]\n    });\n};\n\n});\nparcelRegister(\"g0Gjq\", function(module, exports) {\n\n$parcel$export(module.exports, \"clone\", () => $ba7d77c23190ac11$export$9cd59f9826255e47);\n// Copyright 2021-2025 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar $awiuc = parcelRequire(\"awiuc\");\n\nvar $jzrYg = parcelRequire(\"jzrYg\");\n\nvar $aZnNp = parcelRequire(\"aZnNp\");\nfunction $ba7d77c23190ac11$export$9cd59f9826255e47(schema, message) {\n    return $ba7d77c23190ac11$var$cloneReflect((0, $jzrYg.reflect)(schema, message)).message;\n}\nfunction $ba7d77c23190ac11$var$cloneReflect(i) {\n    const o = (0, $jzrYg.reflect)(i.desc);\n    for (const f of i.fields){\n        if (!i.isSet(f)) continue;\n        switch(f.fieldKind){\n            case \"list\":\n                const list = o.get(f);\n                for (const item of i.get(f))list.add($ba7d77c23190ac11$var$cloneSingular(f, item));\n                break;\n            case \"map\":\n                const map = o.get(f);\n                for (const entry of i.get(f).entries())map.set(entry[0], $ba7d77c23190ac11$var$cloneSingular(f, entry[1]));\n                break;\n            default:\n                o.set(f, $ba7d77c23190ac11$var$cloneSingular(f, i.get(f)));\n                break;\n        }\n    }\n    const unknown = i.getUnknown();\n    if (unknown && unknown.length > 0) o.setUnknown([\n        ...unknown\n    ]);\n    return o;\n}\nfunction $ba7d77c23190ac11$var$cloneSingular(field, value) {\n    if (field.message !== undefined && (0, $aZnNp.isReflectMessage)(value)) return $ba7d77c23190ac11$var$cloneReflect(value);\n    if (field.scalar == (0, $awiuc.ScalarType).BYTES && value instanceof Uint8Array) // @ts-expect-error T cannot extend Uint8Array in practice\n    return value.slice();\n    return value;\n}\n\n});\n\n\n\n//# sourceMappingURL=SettingsModal.2f9bcef4.js.map\n","import {\n  Form,\n  Modal,\n  Input,\n  Typography,\n  Button,\n  Row,\n  Col,\n  Collapse,\n  Checkbox,\n  FormInstance,\n  Tooltip,\n  Select,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useShowModal } from \"../components/ModalManager\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { formatErrorAlert, useAlertApi } from \"../components/Alerts\";\nimport { namePattern, validateForm } from \"../lib/formutil\";\nimport { useConfig } from \"../components/ConfigProvider\";\nimport { authenticationService, backrestService } from \"../api\";\nimport { clone, fromJson, toJson } from \"@bufbuild/protobuf\";\nimport {\n  AuthSchema,\n  Config,\n  ConfigSchema,\n  UserSchema,\n  MultihostSchema,\n  Multihost_PeerSchema,\n  Multihost_Permission_Type,\n} from \"../../gen/ts/v1/config_pb\";\nimport { PeerState } from \"../../gen/ts/v1/syncservice_pb\";\nimport {\n  subscribeToPeerStates,\n  unsubscribeFromPeerStates,\n} from \"../state/peerstates\";\nimport { PeerStateConnectionStatusIcon } from \"../components/SyncStateIcon\";\n\ninterface FormData {\n  auth: {\n    users: {\n      name: string;\n      passwordBcrypt: string;\n      needsBcrypt?: boolean;\n    }[];\n  };\n  instance: string;\n  multihost: {\n    identity: {\n      keyId: string;\n    };\n    knownHosts: {\n      instanceId: string;\n      keyId: string;\n      keyIdVerified?: boolean;\n      instanceUrl: string;\n      permissions?: {\n        type: number;\n        scopes: string[];\n      }[];\n    }[];\n    authorizedClients: {\n      instanceId: string;\n      keyId: string;\n      keyIdVerified?: boolean;\n      permissions?: {\n        type: number;\n        scopes: string[];\n      }[];\n    }[];\n  };\n}\n\nexport const SettingsModal = () => {\n  let [config, setConfig] = useConfig();\n  const showModal = useShowModal();\n  const alertsApi = useAlertApi()!;\n  const [form] = Form.useForm<FormData>();\n  const [peerStates, setPeerStates] = useState<PeerState[]>([]);\n  const [reloadOnCancel, setReloadOnCancel] = useState(false);\n  const [formEdited, setFormEdited] = useState(false);\n\n  if (!config) {\n    return null;\n  }\n\n  useEffect(() => {\n    const cb = (syncStates: PeerState[]) => {\n      setPeerStates(syncStates);\n    };\n    subscribeToPeerStates(cb);\n    return () => {\n      unsubscribeFromPeerStates(cb);\n    };\n  }, []);\n\n  const handleOk = async () => {\n    try {\n      // Validate form\n      let formData = await validateForm(form);\n\n      if (formData.auth?.users) {\n        for (const user of formData.auth?.users) {\n          if (user.needsBcrypt) {\n            const hash = await authenticationService.hashPassword({\n              value: user.passwordBcrypt,\n            });\n            user.passwordBcrypt = hash.value;\n            delete user.needsBcrypt;\n          }\n        }\n      }\n\n      // Update configuration\n      let newConfig = clone(ConfigSchema, config);\n      newConfig.auth = fromJson(AuthSchema, formData.auth, {\n        ignoreUnknownFields: false,\n      });\n      newConfig.multihost = fromJson(MultihostSchema, formData.multihost, {\n        ignoreUnknownFields: false,\n      });\n      newConfig.instance = formData.instance;\n\n      if (!newConfig.auth?.users && !newConfig.auth?.disabled) {\n        throw new Error(\n          \"At least one user must be configured or authentication must be disabled\"\n        );\n      }\n\n      setConfig(await backrestService.setConfig(newConfig));\n      setReloadOnCancel(true);\n      alertsApi.success(\"Settings updated\", 5);\n      setFormEdited(false);\n    } catch (e: any) {\n      alertsApi.error(formatErrorAlert(e, \"Operation error: \"), 15);\n    }\n  };\n\n  const handleCancel = () => {\n    showModal(null);\n    if (reloadOnCancel) {\n      window.location.reload();\n    }\n  };\n\n  const users = config.auth?.users || [];\n\n  return (\n    <>\n      <Modal\n        open={true}\n        onCancel={handleCancel}\n        title={\"Settings\"}\n        width=\"60vw\"\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            {formEdited ? \"Cancel\" : \"Close\"}\n          </Button>,\n          <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\n            Save\n          </Button>,\n        ]}\n      >\n        <Form\n          autoComplete=\"off\"\n          form={form}\n          labelCol={{ span: 4 }}\n          wrapperCol={{ span: 20 }}\n          onValuesChange={() => setFormEdited(true)}\n        >\n          {users.length > 0 || config.auth?.disabled ? null : (\n            <>\n              <strong>Initial backrest setup! </strong>\n              <p>\n                Backrest has detected that you do not have any users configured,\n                please add at least one user to secure the web interface.\n              </p>\n              <p>\n                You can add more users later or, if you forget your password,\n                reset users by editing the configuration file (typically in\n                $HOME/.backrest/config.json)\n              </p>\n            </>\n          )}\n          <Form.Item\n            hasFeedback\n            name=\"instance\"\n            label=\"Instance ID\"\n            required\n            initialValue={config.instance || \"\"}\n            tooltip=\"The instance name will be used to identify this backrest install. Pick a value carefully as it cannot be changed later.\"\n            rules={[\n              { required: true, message: \"Instance ID is required\" },\n              {\n                pattern: namePattern,\n                message:\n                  \"Instance ID must be alphanumeric with '_-.' allowed as separators\",\n              },\n            ]}\n          >\n            <Input\n              placeholder={\n                \"Unique instance ID for this instance (e.g. my-backrest-server)\"\n              }\n              disabled={!!config.instance}\n            />\n          </Form.Item>\n\n          <Collapse\n            items={[\n              {\n                key: \"1\",\n                label: \"Authentication\",\n                forceRender: true,\n                children: <AuthenticationForm form={form} config={config} />,\n              },\n              {\n                key: \"2\",\n                label: \"Multihost Identity and Sharing\",\n                forceRender: true,\n                children: (\n                  <MultihostIdentityForm\n                    form={form}\n                    config={config}\n                    peerStates={peerStates}\n                  />\n                ),\n                /* hidden until multihost is stable */\n                style: { display: \"none\" },\n              },\n              {\n                key: \"last\",\n                label: \"Preview\",\n                children: (\n                  <Form.Item shouldUpdate wrapperCol={{ span: 24 }}>\n                    {() => (\n                      <Typography>\n                        <pre>\n                          {JSON.stringify(form.getFieldsValue(), null, 2)}\n                        </pre>\n                      </Typography>\n                    )}\n                  </Form.Item>\n                ),\n              },\n            ]}\n          />\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nconst AuthenticationForm: React.FC<{\n  config: Config;\n  form: FormInstance<FormData>;\n}> = ({ form, config }) => {\n  return (\n    <>\n      <Form.Item\n        label=\"Disable Authentication\"\n        name={[\"auth\", \"disabled\"]}\n        valuePropName=\"checked\"\n        initialValue={config.auth?.disabled || false}\n      >\n        <Checkbox />\n      </Form.Item>\n\n      <Form.Item label=\"Users\" required={true}>\n        <Form.List\n          name={[\"auth\", \"users\"]}\n          initialValue={\n            config.auth?.users?.map((u) =>\n              toJson(UserSchema, u, { alwaysEmitImplicit: true })\n            ) || []\n          }\n        >\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map((field, index) => {\n                return (\n                  <Row key={field.key} gutter={16}>\n                    <Col span={11}>\n                      <Form.Item\n                        name={[field.name, \"name\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Name is required\",\n                          },\n                          {\n                            pattern: namePattern,\n                            message:\n                              \"Name must be alphanumeric with dashes or underscores as separators\",\n                          },\n                        ]}\n                      >\n                        <Input placeholder=\"Username\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={11}>\n                      <Form.Item\n                        name={[field.name, \"passwordBcrypt\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Password is required\",\n                          },\n                        ]}\n                      >\n                        <Input.Password\n                          placeholder=\"Password\"\n                          onFocus={() => {\n                            form.setFieldValue(\n                              [\"auth\", \"users\", index, \"needsBcrypt\"],\n                              true\n                            );\n                            form.setFieldValue(\n                              [\"auth\", \"users\", index, \"passwordBcrypt\"],\n                              \"\"\n                            );\n                          }}\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col span={2}>\n                      <MinusCircleOutlined\n                        onClick={() => {\n                          remove(field.name);\n                        }}\n                      />\n                    </Col>\n                  </Row>\n                );\n              })}\n              <Form.Item>\n                <Button\n                  type=\"dashed\"\n                  onClick={() => {\n                    add();\n                  }}\n                  block\n                >\n                  <PlusOutlined /> Add user\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n      </Form.Item>\n    </>\n  );\n};\n\nconst MultihostIdentityForm: React.FC<{\n  config: Config;\n  form: FormInstance<FormData>;\n  peerStates: PeerState[];\n}> = ({ form, config, peerStates }) => {\n  return (\n    <>\n      <Typography.Paragraph italic>\n        Multihost identity allows you to share repositories between multiple\n        Backrest instances. This is useful for keeping track of the backup\n        status of a collections of systems.\n      </Typography.Paragraph>\n      <Typography.Paragraph italic>\n        This feature is experimental and may be subject to version incompatible\n        changes in the future which will require all instances to be updated at\n        the same time.\n      </Typography.Paragraph>\n\n      {/* Show the current instance's identity */}\n      <Form.Item\n        label=\"Multihost Identity\"\n        name={[\"multihost\", \"identity\", \"keyId\"]}\n        initialValue={config.multihost?.identity?.keyid || \"\"}\n        rules={[\n          {\n            required: true,\n            message: \"Multihost identity is required\",\n          },\n        ]}\n        tooltip=\"Multihost identity is used to identify this instance in a multihost setup. It is cryptographically derived from the public key of this instance.\"\n        wrapperCol={{ span: 16 }}\n      >\n        <Row>\n          <Col flex=\"auto\">\n            <Input\n              placeholder=\"Unique multihost identity\"\n              disabled\n              value={config.multihost?.identity?.keyid}\n            />\n          </Col>\n          <Col>\n            <Button\n              type=\"link\"\n              onClick={() =>\n                -navigator.clipboard.writeText(\n                  config.multihost?.identity?.keyid || \"\"\n                )\n              }\n            >\n              copy\n            </Button>\n          </Col>\n        </Row>\n      </Form.Item>\n\n      {/* Authorized client peers. */}\n      <Form.Item\n        label=\"Authorized Clients\"\n        tooltip=\"Authorized clients are other Backrest instances that are allowed to access repositories on this instance.\"\n      >\n        <PeerFormList\n          form={form}\n          listName={[\"multihost\", \"authorizedClients\"]}\n          showInstanceUrl={false}\n          itemTypeName=\"Authorized Client\"\n          peerStates={peerStates}\n          config={config}\n          listType=\"authorizedClients\"\n          initialValue={\n            config.multihost?.authorizedClients?.map((peer) =>\n              toJson(Multihost_PeerSchema, peer, { alwaysEmitImplicit: true })\n            ) || []\n          }\n        />\n      </Form.Item>\n\n      {/* Known host peers. */}\n      <Form.Item\n        label=\"Known Hosts\"\n        tooltip=\"Known hosts are other Backrest instances that this instance can connect to.\"\n      >\n        <PeerFormList\n          form={form}\n          listName={[\"multihost\", \"knownHosts\"]}\n          showInstanceUrl={true}\n          itemTypeName=\"Known Host\"\n          peerStates={peerStates}\n          config={config}\n          listType=\"knownHosts\"\n          initialValue={\n            config.multihost?.knownHosts?.map((peer) =>\n              toJson(Multihost_PeerSchema, peer, { alwaysEmitImplicit: true })\n            ) || []\n          }\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nconst PeerFormList: React.FC<{\n  form: FormInstance<FormData>;\n  listName: string[];\n  showInstanceUrl: boolean;\n  itemTypeName: string;\n  peerStates: PeerState[];\n  initialValue: any[];\n  config: Config;\n  listType: \"knownHosts\" | \"authorizedClients\";\n}> = ({\n  form,\n  listName,\n  showInstanceUrl,\n  itemTypeName,\n  peerStates,\n  initialValue,\n  config,\n  listType,\n}) => {\n  return (\n    <Form.List name={listName} initialValue={initialValue}>\n      {(fields, { add, remove }, { errors }) => (\n        <>\n          {fields.map((field, index) => (\n            <PeerFormListItem\n              key={field.key}\n              form={form}\n              fieldName={field.name}\n              remove={remove}\n              showInstanceUrl={showInstanceUrl}\n              peerStates={peerStates}\n              isKnownHost={listType === \"knownHosts\"}\n              index={index}\n              config={config}\n              listType={listType}\n            />\n          ))}\n          <Form.Item>\n            <Button\n              type=\"dashed\"\n              onClick={() => add({})}\n              block\n              icon={<PlusOutlined />}\n            >\n              Add {itemTypeName || \"Peer\"}\n            </Button>\n            <Form.ErrorList errors={errors} />\n          </Form.Item>\n        </>\n      )}\n    </Form.List>\n  );\n};\n\nconst PeerFormListItem: React.FC<{\n  form: FormInstance<FormData>;\n  fieldName: number;\n  remove: (index: number | number[]) => void;\n  showInstanceUrl: boolean;\n  peerStates: PeerState[];\n  isKnownHost?: boolean;\n  index: number;\n  config: Config;\n  listType: \"knownHosts\" | \"authorizedClients\";\n}> = ({\n  form,\n  fieldName,\n  remove,\n  showInstanceUrl,\n  peerStates,\n  isKnownHost = false,\n  index,\n  config,\n  listType,\n}) => {\n  // Get the instance ID from the form to find the matching sync state, its a bit hacky but works reliably.\n  const keyId = isKnownHost\n    ? form.getFieldValue([\"multihost\", \"knownHosts\", index, \"keyId\"])\n    : form.getFieldValue([\"multihost\", \"authorizedClients\", index, \"keyId\"]);\n\n  const peerState = peerStates.find((state) => state.peerKeyid === keyId);\n\n  return (\n    <div\n      style={{\n        border: \"1px solid #d9d9d9\",\n        borderRadius: \"6px\",\n        padding: \"16px\",\n        marginBottom: \"16px\",\n        position: \"relative\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"8px\",\n          right: \"8px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"8px\",\n        }}\n      >\n        {peerState && <PeerStateConnectionStatusIcon peerState={peerState} />}\n        <MinusCircleOutlined\n          style={{\n            color: \"#999\",\n            cursor: \"pointer\",\n          }}\n          onClick={() => remove(fieldName)}\n        />\n      </div>\n\n      <Row gutter={16}>\n        <Col span={10}>\n          <Form.Item\n            name={[fieldName, \"instanceId\"]}\n            label=\"Instance ID\"\n            rules={[\n              { required: true, message: \"Instance ID is required\" },\n              {\n                pattern: namePattern,\n                message:\n                  \"Instance ID must be alphanumeric with '_-.' allowed as separators\",\n              },\n            ]}\n          >\n            <Input placeholder=\"e.g. my-backup-server\" />\n          </Form.Item>\n        </Col>\n        <Col span={10}>\n          <Form.Item\n            name={[fieldName, \"keyId\"]}\n            label=\"Key ID\"\n            rules={[{ required: true, message: \"Key ID is required\" }]}\n          >\n            <Input placeholder=\"Public key identifier\" />\n          </Form.Item>\n        </Col>\n        <Col span={4}>\n          <Form.Item\n            name={[fieldName, \"keyIdVerified\"]}\n            valuePropName=\"checked\"\n          >\n            <Checkbox>Verified</Checkbox>\n          </Form.Item>\n        </Col>\n      </Row>\n\n      {showInstanceUrl && (\n        <Row gutter={16}>\n          <Col span={24}>\n            <Form.Item\n              name={[fieldName, \"instanceUrl\"]}\n              label=\"Instance URL\"\n              rules={[\n                {\n                  required: showInstanceUrl,\n                  message: \"Instance URL is required for known hosts\",\n                },\n                { type: \"url\", message: \"Please enter a valid URL\" },\n              ]}\n            >\n              <Input placeholder=\"https://example.com:9898\" />\n            </Form.Item>\n          </Col>\n        </Row>\n      )}\n\n      <PeerPermissionsTile\n        form={form}\n        fieldName={fieldName}\n        listType={listType}\n        config={config}\n      />\n    </div>\n  );\n};\n\nconst PeerPermissionsTile: React.FC<{\n  form: FormInstance<FormData>;\n  fieldName: number;\n  listType: \"knownHosts\" | \"authorizedClients\";\n  config: Config;\n}> = ({ form, fieldName, listType, config }) => {\n  const repoOptions = (config.repos || []).map((repo) => ({\n    label: repo.id,\n    value: `repo:${repo.id}`,\n  }));\n\n  return (\n    <div>\n      <Typography.Text strong style={{ marginBottom: \"8px\", display: \"block\" }}>\n        Permissions\n      </Typography.Text>\n\n      <Form.List name={[fieldName, \"permissions\"]}>\n        {(\n          permissionFields,\n          { add: addPermission, remove: removePermission }\n        ) => (\n          <>\n            {permissionFields.map((permissionField) => (\n              <div\n                key={permissionField.key}\n                style={{\n                  border: \"1px solid #d9d9d9\",\n                  borderRadius: \"4px\",\n                  padding: \"12px\",\n                  marginBottom: \"8px\",\n                  backgroundColor: \"transparent\",\n                }}\n              >\n                <Row gutter={8} align=\"middle\">\n                  <Col span={11}>\n                    <Form.Item\n                      name={[permissionField.name, \"type\"]}\n                      label=\"Type\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Permission type is required\",\n                        },\n                      ]}\n                    >\n                      <Select placeholder=\"Select permission type\">\n                        <Select.Option\n                          value={\n                            Multihost_Permission_Type.PERMISSION_READ_WRITE_CONFIG\n                          }\n                        >\n                          Edit Repo Configuration\n                        </Select.Option>\n                        <Select.Option\n                          value={\n                            Multihost_Permission_Type.PERMISSION_READ_OPERATIONS\n                          }\n                        >\n                          Read Operations\n                        </Select.Option>\n                      </Select>\n                    </Form.Item>\n                  </Col>\n                  <Col span={11}>\n                    <Form.Item\n                      name={[permissionField.name, \"scopes\"]}\n                      label=\"Scopes\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"At least one scope is required\",\n                        },\n                      ]}\n                    >\n                      <Select\n                        mode=\"multiple\"\n                        placeholder=\"Select repositories or use * for all\"\n                        options={[\n                          { label: \"All Repositories (*)\", value: \"*\" },\n                          ...repoOptions,\n                        ]}\n                      />\n                    </Form.Item>\n                  </Col>\n                  <Col span={2}>\n                    <MinusCircleOutlined\n                      style={{\n                        color: \"#999\",\n                        cursor: \"pointer\",\n                        fontSize: \"16px\",\n                      }}\n                      onClick={() => removePermission(permissionField.name)}\n                    />\n                  </Col>\n                </Row>\n              </div>\n            ))}\n            <Button\n              type=\"dashed\"\n              onClick={() =>\n                addPermission({\n                  type: Multihost_Permission_Type.PERMISSION_READ_OPERATIONS,\n                  scopes: [\"*\"],\n                })\n              }\n              icon={<PlusOutlined />}\n              size=\"small\"\n              style={{ width: \"100%\" }}\n            >\n              Add Permission\n            </Button>\n          </>\n        )}\n      </Form.List>\n    </div>\n  );\n};\n","// Copyright 2021-2025 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType } from \"./descriptors.js\";\nimport { reflect } from \"./reflect/reflect.js\";\nimport { isReflectMessage } from \"./reflect/guard.js\";\n/**\n * Create a deep copy of a message, including extensions and unknown fields.\n */\nexport function clone(schema, message) {\n    return cloneReflect(reflect(schema, message)).message;\n}\nfunction cloneReflect(i) {\n    const o = reflect(i.desc);\n    for (const f of i.fields) {\n        if (!i.isSet(f)) {\n            continue;\n        }\n        switch (f.fieldKind) {\n            case \"list\":\n                const list = o.get(f);\n                for (const item of i.get(f)) {\n                    list.add(cloneSingular(f, item));\n                }\n                break;\n            case \"map\":\n                const map = o.get(f);\n                for (const entry of i.get(f).entries()) {\n                    map.set(entry[0], cloneSingular(f, entry[1]));\n                }\n                break;\n            default: {\n                o.set(f, cloneSingular(f, i.get(f)));\n                break;\n            }\n        }\n    }\n    const unknown = i.getUnknown();\n    if (unknown && unknown.length > 0) {\n        o.setUnknown([...unknown]);\n    }\n    return o;\n}\nfunction cloneSingular(field, value) {\n    if (field.message !== undefined && isReflectMessage(value)) {\n        return cloneReflect(value);\n    }\n    if (field.scalar == ScalarType.BYTES && value instanceof Uint8Array) {\n        // @ts-expect-error T cannot extend Uint8Array in practice\n        return value.slice();\n    }\n    return value;\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$0f720e8bbc6e79b5$export$dfaef62a0892bd28","$ayMG0","$4Uh7a","$iJ95P","$1gKZf","$bAJM4","$4To0s","$eTcXV","$jCenh","$3VOgd","$2lwvh","$93lJr","$acw62","$dkYnv","$54UqH","$8p4qI","$3JMMO","$lK1ug","$1VQWV","$1Yxub","$g0Gjq","$4l8Tp","$7nu3T","$6Os56","$2riGH","$h3NYq","config","setConfig","useConfig","showModal","useShowModal","alertsApi","useAlertApi","form","default","useForm","peerStates","setPeerStates","useState","reloadOnCancel","setReloadOnCancel","formEdited","setFormEdited","useEffect","cb","syncStates","subscribeToPeerStates","unsubscribeFromPeerStates","handleOk","formData","validateForm","auth","users","user","needsBcrypt","hash","authenticationService","hashPassword","value","passwordBcrypt","newConfig","clone","ConfigSchema","fromJson","AuthSchema","ignoreUnknownFields","multihost","MultihostSchema","instance","disabled","Error","backrestService","success","error","formatErrorAlert","handleCancel","window","location","reload","jsx","Fragment","children","open","onCancel","title","width","footer","onClick","type","jsxs","autoComplete","labelCol","span","wrapperCol","onValuesChange","length","Item","hasFeedback","name","label","required","initialValue","tooltip","rules","message","pattern","namePattern","placeholder","items","key","forceRender","$0f720e8bbc6e79b5$var$AuthenticationForm","$0f720e8bbc6e79b5$var$MultihostIdentityForm","style","display","shouldUpdate","JSON","stringify","getFieldsValue","valuePropName","List","map","u","toJson","UserSchema","alwaysEmitImplicit","fields","add","remove","field","index","gutter","Password","onFocus","setFieldValue","block","Paragraph","italic","identity","keyid","flex","navigator","clipboard","writeText","$0f720e8bbc6e79b5$var$PeerFormList","listName","showInstanceUrl","itemTypeName","listType","authorizedClients","peer","Multihost_PeerSchema","knownHosts","errors","$0f720e8bbc6e79b5$var$PeerFormListItem","fieldName","isKnownHost","icon","ErrorList","keyId","getFieldValue","peerState","find","state","peerKeyid","border","borderRadius","padding","marginBottom","position","top","right","alignItems","gap","PeerStateConnectionStatusIcon","color","cursor","$0f720e8bbc6e79b5$var$PeerPermissionsTile","repoOptions","repos","repo","id","Text","strong","permissionFields","addPermission","removePermission","permissionField","backgroundColor","align","Option","Multihost_Permission_Type","PERMISSION_READ_WRITE_CONFIG","PERMISSION_READ_OPERATIONS","mode","options","fontSize","scopes","size","$ba7d77c23190ac11$export$9cd59f9826255e47","$awiuc","$jzrYg","$aZnNp","schema","$ba7d77c23190ac11$var$cloneReflect","reflect","i","o","desc","f","isSet","fieldKind","list","item","$ba7d77c23190ac11$var$cloneSingular","entry","entries","unknown","getUnknown","setUnknown","undefined","isReflectMessage","scalar","ScalarType","BYTES","Uint8Array","slice"],"version":3,"file":"SettingsModal.2f9bcef4.js.map"}